#!/usr/bin/python
# Partially mirror 'cygwin' distribution
# $Revision: 1.3 $, $Date: 2009-04-11 12:16:41 $
# RW Penney, April 2009

import bz2, md5, optparse, os, os.path, re, time, urllib, urlparse
try: set
except NameError: from sets import Set as set, ImmutableSet as frozenset


# Directory into which to assemble local mirror:
TGT_DIR = '/home/morgue/cyg-mirror'
# URL of Cygwin package database file:
INIURL = ''
# URL of source of Cygwin installation program 'setup.exe':
EXESRC = 'http://sourceware.redhat.com/cygwin/setup.exe'
# URL of Cygwin mirror site, hosting available packages:
MIRROR = 'http://www.mirrorservice.org/sites/sourceware.org/pub/cygwin'
# Set of package age descriptors:
EPOCHS = ['curr']


def mergelines(pkgtxt):
    """Combine list of lines describing single package"""

    if not pkgtxt:
        return ""

    while pkgtxt and pkgtxt[-1].isspace():
        pkgtxt.pop()

    return "".join(pkgtxt)


def ParseIniFile(iniurl):
    """Ingest original 'setup.ini' file defining available cygwin packages"""

    re_setup = re.compile(r'^(setup-\S+):\s+(\S+)$')
    re_comment = re.compile(r'#(.*)$')
    re_blank = re.compile(r'^$')
    re_package = re.compile(r'^@\s+(\S+)$')
    re_epoch = re.compile(r'^\[([a-z]+)\]$')
    re_field = re.compile(r'^([a-z]+):\s+(.*)$')
    re_other = re.compile(r'^(.+)$')
    all_regexps = [ re_setup, re_comment, re_blank,
                    re_package, re_epoch, re_field, re_other ]

    header = {}
    packages = {}

    fp = urllib.urlopen(iniurl)
    lineno = 0
    (pkgname, pkgtxt, pkgdict, epoch) = (None, [], {}, None)
    for line in fp:
        lineno += 1

        # Classify current line as package definition/field etc:
        matches = None
        for regexp in all_regexps:
            matches = regexp.match(line)
            if matches: break
        if not matches:
            raise SyntaxError, "unrecognized content on line %d" % ( lineno )

        if regexp == re_setup:
            header[matches.group(1)] = matches.group(2)
        elif regexp == re_comment:
            pass
        elif regexp == re_blank:
            pass
        elif regexp == re_package:
            if pkgname:
                pkgdict['TEXT'] = mergelines(pkgtxt)
                packages[pkgname] = pkgdict
                pkgname = None
            pkgname = matches.group(1)
            pkgtxt = []
            pkgdict = {}
            epoch = 'curr'
        elif regexp == re_epoch:
            epoch = matches.group(1)
        elif regexp == re_field:
            pkgdict[matches.group(1) + '_' + epoch] = matches.group(2)
        elif regexp == re_other:
            # This doesn't handle multi-line fields fully yet...
            pass

        if pkgname:
            pkgtxt.append(line)
    fp.close()

    if pkgname:
        pkgdict['TEXT'] = mergelines(pkgtxt)
        packages[pkgname] = pkgdict

    return (header, packages)


def ResolveDependencies(pkgdict, usrpkgs=['bash', 'bzip2', 'coreutils', 'gzip', 'tar']):
    """Constuct list of packages, including all their dependencies"""

    additions = set(usrpkgs)
    packages = set()

    while additions:
        pkg = additions.pop()
        packages.add(pkg)

        try:
            pkginfo = pkgdict[pkg]
        except:
            print 'Bad package %s' % pkg
            break

        # Find dependencies of current package & add to stack:
        for epoch in EPOCHS:
            try:
                reqlist = pkginfo['requires' + '_' + epoch].split()
                for r in reqlist:
                    if not r in packages:
                        additions.add(r)
            except:
                print 'cannot find epoch %s for %s' % (epoch, pkg)
                pass

    return list(packages)


def BuildDownload(pkgdict, packages):
    """Convert list of packages into set of files to fetch from Cygwin server"""

    downloads = []
    totsize = 0

    for pkg in packages:
        pkginfo = pkgdict[pkg]

        for epoch in EPOCHS:
            flds = pkginfo['install' + '_' + epoch].split()
            pkgref = flds[0]
            pkgsize = int(flds[1])
            pkghash = flds[2]
            downloads.append((pkgref, pkgsize, pkghash))
            totsize += pkgsize

    return downloads, totsize


def BuildMirror(header, pkgdict, packages):
    """Download files from Cygwin mirror to create local partial copy"""

    if not os.path.isdir(TGT_DIR):
        os.path.makedirs(TGT_DIR)

    # Split package list into normal + specials:
    spkgs = [pkg for pkg in packages if pkg.startswith('_')]
    packages = [pkg for pkg in packages if not pkg.startswith('_')]
    packages.sort()
    spkgs.sort()
    packages.extend(spkgs)

    # Reconstruct setup.ini file:
    spath = os.path.join(TGT_DIR, 'setup.ini')
    fp = open(spath, 'w+t')
    fp.write('# This file is automatically generated by "pmcyg"\n'
            '# Manual edits will be overwritten\n')
    fp.write('setup-timestamp: %d\n' % (int(time.time())))
    fp.write('setup-version: %s\n' % (header['setup-version']))
    for pkg in packages:
        fp.write('\n')
        fp.write(pkgdict[pkg]['TEXT'])
    fp.seek(0)
    cpsr = bz2.BZ2File(os.path.join(TGT_DIR, 'setup.bz2'), mode='w')
    cpsr.write(fp.read())
    cpsr.close()
    fp.close()

    # Create other top-level artefacts:
    urllib.urlretrieve(EXESRC, os.path.join(TGT_DIR, 'setup.exe'))
    for fl in ['setup.ini', 'setup.bz2', 'setup.exe']:
        hshr = md5.new()
        # FIXME - more here


    (downloads, totsize) = BuildDownload(pkgdict, packages)
    print 'Download size: %.1fMB' % ( totsize / (1024.0 * 1024.0) )

    for (pkgfile, pkgsize, pkghash) in downloads:
        if os.path.isabs(pkgfile):
            raise SyntaxError, '%s is an absolute path' % ( pkgfile )
        tgtpath = os.path.join(TGT_DIR, pkgfile)
        tgtdir = os.path.dirname(tgtpath)
        if not os.path.isdir(tgtdir):
            os.makedirs(tgtdir)
        mirpath = urlparse.urljoin(MIRROR, pkgfile)
        if not os.path.isfile(tgtpath) or os.path.getsize(tgtpath) != pkgsize:
            print '%s -> %s' % ( mirpath, tgtdir)
            urllib.urlretrieve(mirpath, tgtpath)



def main():
    global MIRROR

    if not MIRROR.endswith('/'): MIRROR += '/'

    (header, pkgdict) = ParseIniFile("file:/home/morgue/setup.ini")
    packages = ResolveDependencies(pkgdict)

    BuildMirror(header, pkgdict, packages)



if __name__ == "__main__":
    main()

# vim: set ts=4 sw=4 et:
